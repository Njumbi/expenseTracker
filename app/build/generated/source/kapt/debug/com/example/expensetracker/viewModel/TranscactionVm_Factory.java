// Generated by Dagger (https://dagger.dev).
package com.example.expensetracker.viewModel;

import com.example.expensetracker.repository.TransactionRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TranscactionVm_Factory implements Factory<TranscactionVm> {
  private final Provider<TransactionRepository> repositoryProvider;

  public TranscactionVm_Factory(Provider<TransactionRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public TranscactionVm get() {
    return newInstance(repositoryProvider.get());
  }

  public static TranscactionVm_Factory create(Provider<TransactionRepository> repositoryProvider) {
    return new TranscactionVm_Factory(repositoryProvider);
  }

  public static TranscactionVm newInstance(TransactionRepository repository) {
    return new TranscactionVm(repository);
  }
}
